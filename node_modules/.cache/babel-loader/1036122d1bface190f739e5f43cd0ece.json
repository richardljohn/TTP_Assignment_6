{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/richardjohn/Desktop/zip-search/src/components/fetchResult.js\";\nimport React, { Component } from 'react';\nimport fetch from './fetch';\n\nclass fetchResult extends Component {\n  constructor() {\n    super();\n\n    this.daZips = async zipcode => {\n      try {\n        const link = \"http://ctp-zip-api.herokuapp.com/zip/\" + zipcode;\n        const res = await fetch(link);\n        console.log(res);\n\n        if (res.status !== 200) {\n          throw new Error(\"Not a valid Zipcode\");\n        }\n\n        const data = await res.json();\n        this.setState({\n          place: data,\n          error: false\n        });\n        document.getElementById(\"zipValidity\").innerHtML = \"Valid Zip!!!\";\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          error: true\n        });\n        document.getElementById(\"zipValidity\").innerHTML = \"The Zip is not valid... :(\";\n      }\n    };\n\n    this.handleZipChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n      this.daZips(value);\n    };\n\n    this.daCities = async city => {\n      try {\n        const link = \"https://ctp-zip-api.herokuapp.com/city/\" + city;\n        const res = await fetch(link);\n        console.log(res);\n\n        if (res.status !== 200) {\n          throw new Error(\"Not a valid City\");\n        }\n\n        const data = await res.json();\n        this.setState({\n          zip: data,\n          error: false\n        });\n        document.getElementById(\"cityValidity\").innerHTML = \"Valid city!!!\";\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          error: true\n        });\n        document.getElementById(\"cityValidity\").innerHTML = \"The city is not  valid.... :(\";\n      }\n    };\n\n    this.ConvertCommas = number => {\n      number.toLocaleString();\n    };\n\n    this.ConvertTexttoUpperCase = text => {\n      let upperCased = text.toUpperCase();\n      return upperCased;\n    };\n\n    this.handleCityChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n      value = this.ConvertTexttoUpperCase(value);\n      this.daCities(value);\n    };\n\n    this.state = {\n      place: [],\n      zipcode: \"\",\n      error: false,\n      zips: []\n    };\n  }\n\n  async componentDidMount() {\n    document.getElementById('zipValidity').innerHTML = \"Here are the cities located in the Zipcode...\";\n    document.getElementById('cityValidity').innerHTML = \"Here are the zipcodes located in the City...\";\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"fetch\", {\n        handleZipChange: this.handleZipChange,\n        handleCityChange: this.handleCityChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"searching\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"The Cities in this ZipCode: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), this.state.place.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"City: \", item.City, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 47\n          }, this), \"State: \", item.State, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 49\n          }, this), \"Estimated Population: \", item.EstimatedPopulation, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 77\n          }, this), \"Total Wages: $\", item.TotalWages, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 60\n          }, this), \"Country: \", item.Country, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 53\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"The Zipcodes in this City: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), this.state.zips.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"list\",\n          children: [item, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default fetchResult;","map":{"version":3,"sources":["/Users/richardjohn/Desktop/zip-search/src/components/fetchResult.js"],"names":["React","Component","fetch","fetchResult","constructor","daZips","zipcode","link","res","console","log","status","Error","data","json","setState","place","error","document","getElementById","innerHtML","innerHTML","handleZipChange","event","name","target","value","daCities","city","zip","ConvertCommas","number","toLocaleString","ConvertTexttoUpperCase","text","upperCased","toUpperCase","handleCityChange","state","zips","componentDidMount","render","map","item","index","City","State","EstimatedPopulation","TotalWages","Country"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport fetch from './fetch'\n\nclass fetchResult extends Component {\n    constructor() {\n        super();\n        this.state = {\n            place: [],\n            zipcode: \"\",\n            error: false,\n            zips: []\n        }\n    }\n    async componentDidMount() {\n        document.getElementById('zipValidity').innerHTML = \"Here are the cities located in the Zipcode...\";\n        document.getElementById('cityValidity').innerHTML = \"Here are the zipcodes located in the City...\";\n    }\n\n    daZips = async (zipcode) => {\n        try { \n            const link = \"http://ctp-zip-api.herokuapp.com/zip/\" + zipcode;\n            const res = await fetch(link);\n            console.log(res);\n            if(res.status !== 200){\n                throw new Error(\"Not a valid Zipcode\");\n            }\n            const data = await res.json();\n            this.setState({\n                place: data,\n                error: false\n            })\n            document.getElementById(\"zipValidity\").innerHtML = \"Valid Zip!!!\";\n            console.log(data);\n        } \n        catch(error){\n            console.log(error);\n            this.setState({\n                error: true\n            })\n            document.getElementById(\"zipValidity\").innerHTML = \"The Zip is not valid... :(\";\n        }\n    }\n    handleZipChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        this.setState({\n            [name]: value\n        })\n        this.daZips(value)\n    }\n\n    daCities = async (city) => {\n        try { \n            const link = \"https://ctp-zip-api.herokuapp.com/city/\" + city; \n            const res = await fetch(link);\n            console.log(res);\n            if(res.status !== 200) { \n                throw new Error(\"Not a valid City\");\n            }\n            const data = await res.json();\n            this.setState({\n                zip: data,\n                error: false\n            })\n            document.getElementById(\"cityValidity\").innerHTML = \"Valid city!!!\";\n            console.log(data);\n        } \n        catch(error){\n            console.log(error);\n            this.setState({\n                error: true\n            })\n            document.getElementById(\"cityValidity\").innerHTML = \"The city is not  valid.... :(\";\n        }\n    }\n\n    ConvertCommas = (number) => {\n        number.toLocaleString();\n    }\n        \n    ConvertTexttoUpperCase = (text) => {\n        let upperCased = text.toUpperCase();\n        return upperCased;\n    }\n        \n    handleCityChange = (event) => {\n        let name = event.target.name;\n        let value = event.target.value;\n        this.setState({\n            [name]: value\n        })\n        value = this.ConvertTexttoUpperCase(value);\n        this.daCities(value);\n    }\n\n    render() {\n        return( \n            <div>\n                <fetch handleZipChange = {this.handleZipChange} handleCityChange = {this.handleCityChange}/>\n                { \n                    (<div class = \"searching\">\n                    <b>The Cities in this ZipCode: </b>\n                    {this.state.place.map((item, index) => \n                        <div key = {index}>\n                            City: {item.City} <br></br>\n                            State: {item.State} <br></br>\n                            Estimated Population: {item.EstimatedPopulation}<br></br>\n                            Total Wages: ${item.TotalWages}<br></br>\n                            Country: {item.Country} <br></br>\n                        </div>\n                    )}\n                    <br></br>\n                    <b>The Zipcodes in this City: </b>\n                    <br></br>\n                    {this.state.zips.map((item, index) => \n                        <div class = \"list\" key = {index}>{item } </div>\n                    )}\n                </div>)\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default fetchResult;"]},"metadata":{},"sourceType":"module"}