{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/richardjohn/Desktop/zip-search/src/components/fetchInputResult.js\";\nimport React, { Component } from 'react';\nimport FetchInput from './fetchInput';\n\nclass FetchInputResult extends Component {\n  constructor() {\n    super();\n\n    this.findZips = async zipCode => {\n      try {\n        const url = 'https://ctp-zip-api.herokuapp.com/zip/' + zipCode;\n        const response = await fetch(url);\n        console.log(response);\n\n        if (response.status !== 200) {\n          throw new Error('Invalid ZipCode Entry');\n        }\n\n        const data = await response.json();\n        this.setState({\n          place: data,\n          error: false\n        });\n        document.getElementById('nonValid').innerHTML = 'Valid ZipCode!';\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          error: true\n        });\n        document.getElementById('nonValid').innerHTML = 'Not a valid ZipCode entry.';\n      }\n    };\n\n    this.handleZipChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n      this.findZips(value);\n    };\n\n    this.findCities = async city => {\n      try {\n        const url = 'https://ctp-zip-api.herokuapp.com/city/' + city;\n        const response = await fetch(url);\n        console.log(response);\n\n        if (response.status !== 200) {\n          throw new Error('Invalid City Entry');\n        }\n\n        const data = await response.json();\n        this.setState({\n          zips: data,\n          error: false\n        });\n        document.getElementById('nonValidCity').innerHTML = 'Valid City!';\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          error: true\n        });\n        document.getElementById('nonValidCity').innerHTML = 'Not a valid City entry.';\n      }\n    };\n\n    this.ConvertTextToUpperCase = A => {\n      let B = A.toUpperCase();\n      return B;\n    };\n\n    this.handleCityChange = event => {\n      let name = event.target.name;\n      let value = event.target.value;\n      this.setState({\n        [name]: value\n      });\n      value = this.ConvertTextToUpperCase(value);\n      this.findCities(value);\n    };\n\n    this.state = {\n      place: [],\n      zipCode: \"\",\n      error: false,\n      zips: []\n    };\n  }\n\n  async componentDidMount() {\n    document.getElementById('nonValid').innerHTML = 'You will be displayed the cities within that ZipCode';\n    document.getElementById('nonValidCity').innerHTML = 'You will be displayed the ZipCodes within that City';\n  }\n\n  ConvertCommas(number) {\n    number.toLocaleString();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FetchInput, {\n        handleZipChange: this.handleZipChange,\n        handleCityChange: this.handleCityChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Cities within your ZipCode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), this.state.place.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"City: \", item.City, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 43\n          }, this), \"State: \", item.State, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 44\n          }, this), \"Estimated Population: \", item.EstimatedPopulation, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 73\n          }, this), \"Total Wages: $\", item.TotalWages, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 56\n          }, this), \"Country: \", item.Country, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 48\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 58\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"ZipCodes within your City:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), this.state.zips.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"list\",\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default FetchInputResult;","map":{"version":3,"sources":["/Users/richardjohn/Desktop/zip-search/src/components/fetchInputResult.js"],"names":["React","Component","FetchInput","FetchInputResult","constructor","findZips","zipCode","url","response","fetch","console","log","status","Error","data","json","setState","place","error","document","getElementById","innerHTML","handleZipChange","event","name","target","value","findCities","city","zips","ConvertTextToUpperCase","A","B","toUpperCase","handleCityChange","state","componentDidMount","ConvertCommas","number","toLocaleString","render","map","item","index","City","State","EstimatedPopulation","TotalWages","Country"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport FetchInput from './fetchInput'\n\nclass FetchInputResult extends Component {\n    constructor(){\n        super();\n        this.state={\n            place: [],\n            zipCode: \"\",\n            error: false,\n            zips: []\n        }\n    }\n    async componentDidMount(){\n        document.getElementById('nonValid').innerHTML = 'You will be displayed the cities within that ZipCode'\n        document.getElementById('nonValidCity').innerHTML = 'You will be displayed the ZipCodes within that City'\n    }\n    findZips = async (zipCode) => {\n        try{\n            const url = 'https://ctp-zip-api.herokuapp.com/zip/' + zipCode;\n            const response = await fetch(url);\n            console.log(response)\n            if(response.status !== 200){\n                throw new Error('Invalid ZipCode Entry')\n            }\n            const data = await response.json();\n            this.setState({\n                place: data,\n                error: false\n            })\n            document.getElementById('nonValid').innerHTML = 'Valid ZipCode!'\n            console.log(data);\n        } catch(error){\n            console.log(error)\n            this.setState({\n                error: true\n            })\n            document.getElementById('nonValid').innerHTML = 'Not a valid ZipCode entry.'\n        }\n    }\n    handleZipChange = (event) =>{\n        let name = event.target.name;\n        let value = event.target.value;\n        this.setState({\n            [name]: value\n        })\n        this.findZips(value)\n    }\n\n\n    findCities = async (city) => {\n        try{\n            const url = 'https://ctp-zip-api.herokuapp.com/city/' + city;\n            const response = await fetch(url);\n            console.log(response)\n            if(response.status !== 200){\n                throw new Error('Invalid City Entry')\n            }\n            const data = await response.json();\n            this.setState({\n                zips: data,\n                error: false\n            })\n            document.getElementById('nonValidCity').innerHTML = 'Valid City!'\n            console.log(data);\n        } catch(error){\n            console.log(error)\n            this.setState({\n                error: true\n            })\n            document.getElementById('nonValidCity').innerHTML = 'Not a valid City entry.'\n        }\n    }\n\n    ConvertCommas(number){\n        number.toLocaleString();\n    }\n\n    ConvertTextToUpperCase=(A)=>{\n        let B = A.toUpperCase() ;\n        return B\n    }\n\n    handleCityChange = (event) =>{\n        let name = event.target.name;\n        let value = event.target.value;\n        this.setState({\n            [name]: value\n        })\n        value = this.ConvertTextToUpperCase(value)\n        this.findCities(value)\n    }\n\n\nrender(){\n    return(\n        <div>\n            <FetchInput handleZipChange = {this.handleZipChange} handleCityChange = {this.handleCityChange}/>\n        {\n            (<div className='ml'>\n                <b>Cities within your ZipCode:</b>\n                {this.state.place.map((item, index) =>\n                    <div key={index}>\n                        City: {item.City} <br></br>\n                        State: {item.State}<br></br>\n                        Estimated Population: {item.EstimatedPopulation}<br></br>\n                        Total Wages: ${item.TotalWages}<br></br>\n                        Country: {item.Country}<br></br> <br></br>\n                    </div>\n                )}\n                <br></br>\n                <br></br>\n                <b>ZipCodes within your City:</b>\n                <br></br>\n                {this.state.zips.map((item, index) =>\n                    <div class='list' key={index}>{item }</div>\n                )}\n            </div>)\n        }\n        </div>\n        \n        \n    )\n}\n\n   \n}\n\nexport default FetchInputResult"]},"metadata":{},"sourceType":"module"}